/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.4.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Camera;
import org.openapitools.model.Subscription;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-02-18T17:28:49.134660478Z[Etc/UTC]")
@Validated
@Tag(name = "subscription", description = "Managing subscription")
public interface SubscriptionApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /subscription
     * Create a new subscription
     *
     * @param subscription Update subscriber information (required)
     * @return Successful response (status code 200)
     */
    @Operation(
        operationId = "addSubscription",
        description = "Create a new subscription",
        tags = { "subscription" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/subscription",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> addSubscription(
        @Parameter(name = "Subscription", description = "Update subscriber information", required = true) @Valid @RequestBody Subscription subscription
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /subscription/{subscriptionId}
     * Update a subscription
     *
     * @param subscriptionId ID of subscription to delete (required)
     * @return Successful response (status code 200)
     */
    @Operation(
        operationId = "deleteSubscription",
        description = "Update a subscription",
        tags = { "subscription" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/subscription/{subscriptionId}"
    )
    
    default ResponseEntity<Void> deleteSubscription(
        @Parameter(name = "subscriptionId", description = "ID of subscription to delete", required = true, in = ParameterIn.PATH) @PathVariable("subscriptionId") Long subscriptionId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /subscription/{subscriptionId}/camera
     * Returns a list of all cameras that is within subscription
     *
     * @param subscriptionId ID of subscription to get the relevant cameras from (required)
     * @return Successful response (status code 200)
     */
    @Operation(
        operationId = "getSubscribersCamera",
        description = "Returns a list of all cameras that is within subscription",
        tags = { "subscription" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Camera.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/subscription/{subscriptionId}/camera",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Camera>> getSubscribersCamera(
        @Parameter(name = "subscriptionId", description = "ID of subscription to get the relevant cameras from", required = true, in = ParameterIn.PATH) @PathVariable("subscriptionId") Long subscriptionId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"name\" : \"camera1\", \"location\" : { \"latitude\" : 41.4, \"longitude\" : 2.1 }, \"id\" : 11 }, { \"name\" : \"camera1\", \"location\" : { \"latitude\" : 41.4, \"longitude\" : 2.1 }, \"id\" : 11 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /subscription
     * Get a list of all subscriptions
     *
     * @return Successful response (status code 200)
     */
    @Operation(
        operationId = "getSubscription",
        description = "Get a list of all subscriptions",
        tags = { "subscription" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Subscription.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/subscription",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Subscription>> getSubscription(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"subscriberId\" : 311109, \"id\" : 10, \"camera\" : { \"name\" : \"camera1\", \"location\" : { \"latitude\" : 41.4, \"longitude\" : 2.1 }, \"id\" : 11 }, \"status\" : \"active\" }, { \"subscriberId\" : 311109, \"id\" : 10, \"camera\" : { \"name\" : \"camera1\", \"location\" : { \"latitude\" : 41.4, \"longitude\" : 2.1 }, \"id\" : 11 }, \"status\" : \"active\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /subscription/{subscriptionId}
     * Returns a subscription of a subscriber
     *
     * @param subscriptionId ID of subscription to return (required)
     * @return Successful response (status code 200)
     */
    @Operation(
        operationId = "getSubscriptionById",
        description = "Returns a subscription of a subscriber",
        tags = { "subscription" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Subscription.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/subscription/{subscriptionId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Subscription> getSubscriptionById(
        @Parameter(name = "subscriptionId", description = "ID of subscription to return", required = true, in = ParameterIn.PATH) @PathVariable("subscriptionId") Long subscriptionId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"subscriberId\" : 311109, \"id\" : 10, \"camera\" : { \"name\" : \"camera1\", \"location\" : { \"latitude\" : 41.4, \"longitude\" : 2.1 }, \"id\" : 11 }, \"status\" : \"active\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /subscription/{subscriptionId}
     * Update a subscription
     *
     * @param subscriptionId ID of subscription to update (required)
     * @param subscription Update an existent pet in the store (required)
     * @return Successful response (status code 200)
     */
    @Operation(
        operationId = "updateSubscription",
        description = "Update a subscription",
        tags = { "subscription" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/subscription/{subscriptionId}",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> updateSubscription(
        @Parameter(name = "subscriptionId", description = "ID of subscription to update", required = true, in = ParameterIn.PATH) @PathVariable("subscriptionId") Long subscriptionId,
        @Parameter(name = "Subscription", description = "Update an existent pet in the store", required = true) @Valid @RequestBody Subscription subscription
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
