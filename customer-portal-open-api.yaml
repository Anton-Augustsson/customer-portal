openapi: 3.0.0
info:
  version: 1.0.0
  title: Customer Portal API
  description: An example customer portal OpenAPI specification
tags:
  - name: subscriber
    description: Managing subscribers
  - name: subscription
    description: Managing subscription
  - name: camera
    description: Managing camera
paths:
  /subscriber:
    get:
      tags:
        - subscriber
      description: Returns a list of all subscribers              
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#components/schemas/SubscribersList'
    post:
      tags:
        - subscriber
      description: Create a single subscribers              
      requestBody:
        description: Update an existent pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subscriber'
        required: true
      responses:
        '200':
          description: Successful response
  /subscriber/{subscriberId}:
    get:
      tags:
        - subscriber
      description: Get a single subscribers
      parameters:
        - name: subscriberId
          in: path
          description: ID of subscriber to get data from
          required: true
          schema:
              $ref: '#/components/schemas/SubscriberID'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscriber'
    put:
      tags:
        - subscriber
      description: Update a single subscribers
      parameters:
        - name: subscriberId
          in: path
          description: ID of subscriber to update
          required: true
          schema:
              $ref: '#/components/schemas/SubscriberID'
      requestBody:
        description: Update subscriber information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subscriber'
        required: true
      responses:
        '200':
          description: Successful response
    delete:
      tags:
        - subscriber
      description: Delete a single subscribers              
      responses:
        '200':
          description: Successful response
  /subscriber/{subscriberId}/subscription:
    get:
      tags:
        - subscriber
      description: Returns a list of all of the subscription of a subscriber
      parameters:
        - name: subscriberId
          in: path
          description: ID of subscriber to get the subscription from
          required: true
          schema:
              $ref: '#/components/schemas/SubscriberID'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#components/schemas/SubscriptionsList'
  /subscription:
    get:
      tags:
        - subscription
      description: Get a list of all subscriptions
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionsList'
    post:
      tags:
        - subscription
      description: Create a new subscription
      requestBody:
        description: Update subscriber information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subscription'
        required: true
      responses:
        '200':
          description: Successful response
  /subscription/{subscriptionId}:
    get:
      tags:
        - subscription
      description: Returns a subscription of a subscriber
      parameters:
        - name: subscriberId
          in: path
          description: ID of subscriber that the subscription belongs to
          required: true
          schema:
              $ref: '#/components/schemas/SubscriberID'
        - name: subscriptionId
          in: path
          description: ID of subscription to return
          required: true
          schema:
              $ref: '#/components/schemas/SubscriptionID'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#components/schemas/Subscription'
    put:
      tags:
        - subscription
      description: Update a subscription
      parameters:
        - name: subscriberId
          in: path
          description: ID of subscriber that the subscription belongs to
          required: true
          schema:
              $ref: '#/components/schemas/SubscriberID'
        - name: subscriptionId
          in: path
          description: ID of subscription to update
          required: true
          schema:
              $ref: '#/components/schemas/SubscriptionID'
      requestBody:
        description: Update an existent pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subscription'
        required: true
      responses:
        '200':
          description: Successful response
    delete:
      tags:
        - subscription
      description: Update a subscription
      parameters:
        - name: subscriberId
          in: path
          description: ID of subscriber that the subscription belongs to
          required: true
          schema:
              $ref: '#/components/schemas/SubscriberID'
        - name: subscriptionId
          in: path
          description: ID of subscription to delete
          required: true
          schema:
              $ref: '#/components/schemas/SubscriptionID'
      responses:
        '200':
          description: Successful response
  /subscription/{subscriptionId}/camera:
    get:
      tags:
        - subscription
      description: Returns a list of all cameras that is within subscription
      parameters:
        - name: subscriberId
          in: path
          description: ID of subscriber that the subscription belongs to
          required: true
          schema:
              $ref: '#/components/schemas/SubscriberID'
        - name: subscriptionId
          in: path
          description: ID of subscription to get the relevant cameras from
          required: true
          schema:
              $ref: '#/components/schemas/SubscriptionID'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#components/schemas/CamerasList'
  /camera:
    get:
      tags:
        - camera
      description: Returns a list of all cameras
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#components/schemas/CamerasList'
    post:
      tags:
        - camera
      description: Create a new available camera
      responses:
        '200':
          description: Successful response
  /camera/{cameraId}:
    put:
      tags:
        - camera
      description: Update 
      parameters:
        - name: cameraID
          in: path
          description: ID of camera to update
          required: true
          schema:
              $ref: '#/components/schemas/CameraID'
      responses:
        '200':
          description: Successful response
  /camera/{cameraId}/location:
    put:
      tags:
        - camera
      description: Update 
      parameters:
        - name: subscriberId
          in: path
          description: ID of camera to update
          required: true
          schema:
              $ref: '#/components/schemas/CameraID'
      requestBody:
        description: The new location of the camera
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Coordinates'
        required: true
      responses:
        '200':
          description: Successful response
components:
  schemas:
    Subscriber:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/SubscriberID'
        username:
          type: string
          format: fehguy
          example: bob123
        name:
          type: string
          format: fehguy
          example: bob smith
      required:
        - id
        - username
    Subscription:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        subscriberId:
          $ref: '#/components/schemas/SubscriberID'
        status:
          type: string
          enum:
            - active
            - inactive
            - suspended
            - processing
        camera:
          $ref: '#/components/schemas/Camera'
    Camera:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 11
        name:
          type: string
          format: fehguy
          example: camera1
        location:
          $ref: '#/components/schemas/Coordinates'
      required:
        - id
    Coordinates:
      # Coordinates are represented in decimal degrees (DD)
      type: object
      properties:
        latitude:
          type: number
          format: double
          minimum: -90.0
          maximum: 90.0
          example: 41.40338
        longitude:
          type: number
          format: double
          minimum: -180.0
          maximum: 180.0
          example: 2.17403
      required:
        - latitude
        - longitude
    SubscribersList:
      type: array
      items:
        $ref: '#/components/schemas/Subscriber'
    SubscriptionsList:
      type: array
      items:
        $ref: '#/components/schemas/Subscription'
    CamerasList:
      type: array
      items:
        $ref: '#/components/schemas/CameraID'
    SubscriberID:
      type: integer
      format: int64
      example: 311109
    SubscriptionID:
      type: integer
      format: int64
      example: 311109
    CameraID:
      type: integer
      format: int64
      example: 311109